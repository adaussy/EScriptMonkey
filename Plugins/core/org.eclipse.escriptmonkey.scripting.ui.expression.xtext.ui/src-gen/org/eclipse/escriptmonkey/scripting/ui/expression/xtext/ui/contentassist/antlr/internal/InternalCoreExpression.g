/*
* generated by Xtext
*/
grammar InternalCoreExpression;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.escriptmonkey.scripting.ui.expression.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.escriptmonkey.scripting.ui.expression.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.escriptmonkey.scripting.ui.expression.xtext.services.CoreExpressionGrammarAccess;

}

@parser::members {
 
 	private CoreExpressionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CoreExpressionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRoot
entryRuleRoot 
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootAccess().getGroup()); }
(rule__Root__Group__0)
{ after(grammarAccess.getRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleInstanceExpression
entryRuleInstanceExpression 
:
{ before(grammarAccess.getInstanceExpressionRule()); }
	 ruleInstanceExpression
{ after(grammarAccess.getInstanceExpressionRule()); } 
	 EOF 
;

// Rule InstanceExpression
ruleInstanceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceExpressionAccess().getGroup()); }
(rule__InstanceExpression__Group__0)
{ after(grammarAccess.getInstanceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpresison
entryRuleOrExpresison 
:
{ before(grammarAccess.getOrExpresisonRule()); }
	 ruleOrExpresison
{ after(grammarAccess.getOrExpresisonRule()); } 
	 EOF 
;

// Rule OrExpresison
ruleOrExpresison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpresisonAccess().getGroup()); }
(rule__OrExpresison__Group__0)
{ after(grammarAccess.getOrExpresisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup()); }
(rule__NotExpression__Group__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIterableExpression
entryRuleIterableExpression 
:
{ before(grammarAccess.getIterableExpressionRule()); }
	 ruleIterableExpression
{ after(grammarAccess.getIterableExpressionRule()); } 
	 EOF 
;

// Rule IterableExpression
ruleIterableExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIterableExpressionAccess().getGroup()); }
(rule__IterableExpression__Group__0)
{ after(grammarAccess.getIterableExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWithExpression
entryRuleWithExpression 
:
{ before(grammarAccess.getWithExpressionRule()); }
	 ruleWithExpression
{ after(grammarAccess.getWithExpressionRule()); } 
	 EOF 
;

// Rule WithExpression
ruleWithExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWithExpressionAccess().getGroup()); }
(rule__WithExpression__Group__0)
{ after(grammarAccess.getWithExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdaptExpression
entryRuleAdaptExpression 
:
{ before(grammarAccess.getAdaptExpressionRule()); }
	 ruleAdaptExpression
{ after(grammarAccess.getAdaptExpressionRule()); } 
	 EOF 
;

// Rule AdaptExpression
ruleAdaptExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdaptExpressionAccess().getGroup()); }
(rule__AdaptExpression__Group__0)
{ after(grammarAccess.getAdaptExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualExpression
entryRuleEqualExpression 
:
{ before(grammarAccess.getEqualExpressionRule()); }
	 ruleEqualExpression
{ after(grammarAccess.getEqualExpressionRule()); } 
	 EOF 
;

// Rule EqualExpression
ruleEqualExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualExpressionAccess().getGroup()); }
(rule__EqualExpression__Group__0)
{ after(grammarAccess.getEqualExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperator
entryRuleOperator 
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleOperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getAlternatives()); }
(rule__Variable__Alternatives)
{ after(grammarAccess.getVariableAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getInstanceExpressionParserRuleCall_0()); }
	ruleInstanceExpression
{ after(grammarAccess.getExpressionAccess().getInstanceExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall_1()); }
	ruleAndExpression
{ after(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getOrExpresisonParserRuleCall_2()); }
	ruleOrExpresison
{ after(grammarAccess.getExpressionAccess().getOrExpresisonParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNotExpressionParserRuleCall_3()); }
	ruleNotExpression
{ after(grammarAccess.getExpressionAccess().getNotExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getIterableExpressionParserRuleCall_4()); }
	ruleIterableExpression
{ after(grammarAccess.getExpressionAccess().getIterableExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getWithExpressionParserRuleCall_5()); }
	ruleWithExpression
{ after(grammarAccess.getExpressionAccess().getWithExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getAdaptExpressionParserRuleCall_6()); }
	ruleAdaptExpression
{ after(grammarAccess.getExpressionAccess().getAdaptExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getEqualExpressionParserRuleCall_7()); }
	ruleEqualExpression
{ after(grammarAccess.getExpressionAccess().getEqualExpressionParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAndKeyword_0()); }

	'and' 

{ after(grammarAccess.getOperatorAccess().getAndKeyword_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getOrKeyword_1()); }

	'or' 

{ after(grammarAccess.getOperatorAccess().getOrKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getActiveContextsKeyword_0()); }

	'activeContexts' 

{ after(grammarAccess.getVariableAccess().getActiveContextsKeyword_0()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getActiveEditorKeyword_1()); }

	'activeEditor' 

{ after(grammarAccess.getVariableAccess().getActiveEditorKeyword_1()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getActiveEditorIdKeyword_2()); }

	'activeEditorId' 

{ after(grammarAccess.getVariableAccess().getActiveEditorIdKeyword_2()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getActivePartIdKeyword_3()); }

	'activePartId' 

{ after(grammarAccess.getVariableAccess().getActivePartIdKeyword_3()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getActiveSiteKeyword_4()); }

	'activeSite' 

{ after(grammarAccess.getVariableAccess().getActiveSiteKeyword_4()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getSelectionKeyword_5()); }

	'selection' 

{ after(grammarAccess.getVariableAccess().getSelectionKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Root__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Root__Group__0__Impl
	rule__Root__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getRootAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Root__Group__1__Impl
	rule__Root__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getExpressionAssignment_1()); }
(rule__Root__ExpressionAssignment_1)
{ after(grammarAccess.getRootAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Root__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getRootAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InstanceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceExpression__Group__0__Impl
	rule__InstanceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceExpressionAccess().getInstanceOfKeyword_0()); }

	'InstanceOf' 

{ after(grammarAccess.getInstanceExpressionAccess().getInstanceOfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceExpressionAccess().getValueAssignment_1()); }
(rule__InstanceExpression__ValueAssignment_1)
{ after(grammarAccess.getInstanceExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionAction_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
	rule__AndExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndKeyword_1()); }

	'And' 

{ after(grammarAccess.getAndExpressionAccess().getAndKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__2__Impl
	rule__AndExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAndExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__3__Impl
	rule__AndExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_3()); }
(rule__AndExpression__Group_3__0)?
{ after(grammarAccess.getAndExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAndExpressionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AndExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_3__0__Impl
	rule__AndExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExpressionsAssignment_3_0()); }
(rule__AndExpression__ExpressionsAssignment_3_0)
{ after(grammarAccess.getAndExpressionAccess().getExpressionsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_3_1()); }
(rule__AndExpression__Group_3_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_3_1__0__Impl
	rule__AndExpression__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getAndExpressionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExpressionsAssignment_3_1_1()); }
(rule__AndExpression__ExpressionsAssignment_3_1_1)
{ after(grammarAccess.getAndExpressionAccess().getExpressionsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpresison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpresison__Group__0__Impl
	rule__OrExpresison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getOrExpresisonAction_0()); }
(

)
{ after(grammarAccess.getOrExpresisonAccess().getOrExpresisonAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpresison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpresison__Group__1__Impl
	rule__OrExpresison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getOrKeyword_1()); }

	'Or' 

{ after(grammarAccess.getOrExpresisonAccess().getOrKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpresison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpresison__Group__2__Impl
	rule__OrExpresison__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getOrExpresisonAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpresison__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpresison__Group__3__Impl
	rule__OrExpresison__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getGroup_3()); }
(rule__OrExpresison__Group_3__0)?
{ after(grammarAccess.getOrExpresisonAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpresison__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpresison__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getOrExpresisonAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__OrExpresison__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpresison__Group_3__0__Impl
	rule__OrExpresison__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getExpressionsAssignment_3_0()); }
(rule__OrExpresison__ExpressionsAssignment_3_0)
{ after(grammarAccess.getOrExpresisonAccess().getExpressionsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpresison__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpresison__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getGroup_3_1()); }
(rule__OrExpresison__Group_3_1__0)*
{ after(grammarAccess.getOrExpresisonAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpresison__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpresison__Group_3_1__0__Impl
	rule__OrExpresison__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getOrExpresisonAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpresison__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpresison__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getExpressionsAssignment_3_1_1()); }
(rule__OrExpresison__ExpressionsAssignment_3_1_1)
{ after(grammarAccess.getOrExpresisonAccess().getExpressionsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NotExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__0__Impl
	rule__NotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0()); }
(

)
{ after(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__1__Impl
	rule__NotExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getNotKeyword_1()); }

	'Not' 

{ after(grammarAccess.getNotExpressionAccess().getNotKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__2__Impl
	rule__NotExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getNotExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__3__Impl
	rule__NotExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup_3()); }
(rule__NotExpression__Group_3__0)?
{ after(grammarAccess.getNotExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getNotExpressionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NotExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_3__0__Impl
	rule__NotExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getExpressionsAssignment_3_0()); }
(rule__NotExpression__ExpressionsAssignment_3_0)
{ after(grammarAccess.getNotExpressionAccess().getExpressionsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup_3_1()); }
(rule__NotExpression__Group_3_1__0)*
{ after(grammarAccess.getNotExpressionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NotExpression__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_3_1__0__Impl
	rule__NotExpression__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getNotExpressionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getExpressionsAssignment_3_1_1()); }
(rule__NotExpression__ExpressionsAssignment_3_1_1)
{ after(grammarAccess.getNotExpressionAccess().getExpressionsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IterableExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group__0__Impl
	rule__IterableExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getIterableExpressionAction_0()); }
(

)
{ after(grammarAccess.getIterableExpressionAccess().getIterableExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterableExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group__1__Impl
	rule__IterableExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getIfEmptyAssignment_1()); }
(rule__IterableExpression__IfEmptyAssignment_1)?
{ after(grammarAccess.getIterableExpressionAccess().getIfEmptyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterableExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group__2__Impl
	rule__IterableExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getIterableKeyword_2()); }

	'Iterable' 

{ after(grammarAccess.getIterableExpressionAccess().getIterableKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterableExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group__3__Impl
	rule__IterableExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getOperandAssignment_3()); }
(rule__IterableExpression__OperandAssignment_3)?
{ after(grammarAccess.getIterableExpressionAccess().getOperandAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterableExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group__4__Impl
	rule__IterableExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getIterableExpressionAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterableExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group__5__Impl
	rule__IterableExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getGroup_5()); }
(rule__IterableExpression__Group_5__0)?
{ after(grammarAccess.getIterableExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterableExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getIterableExpressionAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IterableExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group_5__0__Impl
	rule__IterableExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getExpressionsAssignment_5_0()); }
(rule__IterableExpression__ExpressionsAssignment_5_0)
{ after(grammarAccess.getIterableExpressionAccess().getExpressionsAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterableExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getGroup_5_1()); }
(rule__IterableExpression__Group_5_1__0)*
{ after(grammarAccess.getIterableExpressionAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IterableExpression__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group_5_1__0__Impl
	rule__IterableExpression__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getCommaKeyword_5_1_0()); }

	',' 

{ after(grammarAccess.getIterableExpressionAccess().getCommaKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterableExpression__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterableExpression__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getExpressionsAssignment_5_1_1()); }
(rule__IterableExpression__ExpressionsAssignment_5_1_1)
{ after(grammarAccess.getIterableExpressionAccess().getExpressionsAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WithExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WithExpression__Group__0__Impl
	rule__WithExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getWithKeyword_0()); }

	'With' 

{ after(grammarAccess.getWithExpressionAccess().getWithKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WithExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WithExpression__Group__1__Impl
	rule__WithExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getVariableAssignment_1()); }
(rule__WithExpression__VariableAssignment_1)
{ after(grammarAccess.getWithExpressionAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WithExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WithExpression__Group__2__Impl
	rule__WithExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getWithExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WithExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WithExpression__Group__3__Impl
	rule__WithExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getGroup_3()); }
(rule__WithExpression__Group_3__0)?
{ after(grammarAccess.getWithExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WithExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WithExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getWithExpressionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__WithExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WithExpression__Group_3__0__Impl
	rule__WithExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getExpressionsAssignment_3_0()); }
(rule__WithExpression__ExpressionsAssignment_3_0)
{ after(grammarAccess.getWithExpressionAccess().getExpressionsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WithExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WithExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getGroup_3_1()); }
(rule__WithExpression__Group_3_1__0)*
{ after(grammarAccess.getWithExpressionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WithExpression__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WithExpression__Group_3_1__0__Impl
	rule__WithExpression__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getWithExpressionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WithExpression__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WithExpression__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getExpressionsAssignment_3_1_1()); }
(rule__WithExpression__ExpressionsAssignment_3_1_1)
{ after(grammarAccess.getWithExpressionAccess().getExpressionsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdaptExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptExpression__Group__0__Impl
	rule__AdaptExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getAdaptToKeyword_0()); }

	'AdaptTo' 

{ after(grammarAccess.getAdaptExpressionAccess().getAdaptToKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdaptExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptExpression__Group__1__Impl
	rule__AdaptExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getValueAssignment_1()); }
(rule__AdaptExpression__ValueAssignment_1)
{ after(grammarAccess.getAdaptExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdaptExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptExpression__Group__2__Impl
	rule__AdaptExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAdaptExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdaptExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptExpression__Group__3__Impl
	rule__AdaptExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getGroup_3()); }
(rule__AdaptExpression__Group_3__0)?
{ after(grammarAccess.getAdaptExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdaptExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAdaptExpressionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AdaptExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptExpression__Group_3__0__Impl
	rule__AdaptExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getExpressionsAssignment_3_0()); }
(rule__AdaptExpression__ExpressionsAssignment_3_0)
{ after(grammarAccess.getAdaptExpressionAccess().getExpressionsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdaptExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getGroup_3_1()); }
(rule__AdaptExpression__Group_3_1__0)*
{ after(grammarAccess.getAdaptExpressionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdaptExpression__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptExpression__Group_3_1__0__Impl
	rule__AdaptExpression__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getAdaptExpressionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdaptExpression__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptExpression__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getExpressionsAssignment_3_1_1()); }
(rule__AdaptExpression__ExpressionsAssignment_3_1_1)
{ after(grammarAccess.getAdaptExpressionAccess().getExpressionsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group__0__Impl
	rule__EqualExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getEqualKeyword_0()); }

	'Equal' 

{ after(grammarAccess.getEqualExpressionAccess().getEqualKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getValueAssignment_1()); }
(rule__EqualExpression__ValueAssignment_1)
{ after(grammarAccess.getEqualExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Root__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getRootAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getInstanceExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ExpressionsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getAndExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ExpressionsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getAndExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__ExpressionsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getOrExpresisonAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpresison__ExpressionsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpresisonAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getOrExpresisonAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__ExpressionsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getNotExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__ExpressionsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getNotExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__IfEmptyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getIfEmptyIfEmptyKeyword_1_0()); }
(
{ before(grammarAccess.getIterableExpressionAccess().getIfEmptyIfEmptyKeyword_1_0()); }

	'ifEmpty' 

{ after(grammarAccess.getIterableExpressionAccess().getIfEmptyIfEmptyKeyword_1_0()); }
)

{ after(grammarAccess.getIterableExpressionAccess().getIfEmptyIfEmptyKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__OperandAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getOperandOperatorParserRuleCall_3_0()); }
	ruleOperator{ after(grammarAccess.getIterableExpressionAccess().getOperandOperatorParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__ExpressionsAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getExpressionsExpressionParserRuleCall_5_0_0()); }
	ruleExpression{ after(grammarAccess.getIterableExpressionAccess().getExpressionsExpressionParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterableExpression__ExpressionsAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterableExpressionAccess().getExpressionsExpressionParserRuleCall_5_1_1_0()); }
	ruleExpression{ after(grammarAccess.getIterableExpressionAccess().getExpressionsExpressionParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getVariableVariableParserRuleCall_1_0()); }
	ruleVariable{ after(grammarAccess.getWithExpressionAccess().getVariableVariableParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__ExpressionsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getWithExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WithExpression__ExpressionsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getWithExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getAdaptExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__ExpressionsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getAdaptExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptExpression__ExpressionsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getAdaptExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getEqualExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



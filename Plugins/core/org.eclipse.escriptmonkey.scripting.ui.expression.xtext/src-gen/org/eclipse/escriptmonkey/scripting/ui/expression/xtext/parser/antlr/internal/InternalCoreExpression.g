/*
* generated by Xtext
*/
grammar InternalCoreExpression;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.escriptmonkey.scripting.ui.expression.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.escriptmonkey.scripting.ui.expression.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.escriptmonkey.scripting.ui.expression.xtext.services.CoreExpressionGrammarAccess;

}

@parser::members {

 	private CoreExpressionGrammarAccess grammarAccess;
 	
    public InternalCoreExpressionParser(TokenStream input, CoreExpressionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected CoreExpressionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRootAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRootAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getInstanceExpressionParserRuleCall_0()); 
    }
    this_InstanceExpression_0=ruleInstanceExpression
    { 
        $current = $this_InstanceExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall_1()); 
    }
    this_AndExpression_1=ruleAndExpression
    { 
        $current = $this_AndExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOrExpresisonParserRuleCall_2()); 
    }
    this_OrExpresison_2=ruleOrExpresison
    { 
        $current = $this_OrExpresison_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNotExpressionParserRuleCall_3()); 
    }
    this_NotExpression_3=ruleNotExpression
    { 
        $current = $this_NotExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getIterableExpressionParserRuleCall_4()); 
    }
    this_IterableExpression_4=ruleIterableExpression
    { 
        $current = $this_IterableExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getWithExpressionParserRuleCall_5()); 
    }
    this_WithExpression_5=ruleWithExpression
    { 
        $current = $this_WithExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAdaptExpressionParserRuleCall_6()); 
    }
    this_AdaptExpression_6=ruleAdaptExpression
    { 
        $current = $this_AdaptExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getEqualExpressionParserRuleCall_7()); 
    }
    this_EqualExpression_7=ruleEqualExpression
    { 
        $current = $this_EqualExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleInstanceExpression
entryRuleInstanceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceExpressionRule()); }
	 iv_ruleInstanceExpression=ruleInstanceExpression 
	 { $current=$iv_ruleInstanceExpression.current; } 
	 EOF 
;

// Rule InstanceExpression
ruleInstanceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='InstanceOf' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstanceExpressionAccess().getInstanceOfKeyword_0());
    }
(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getInstanceExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAndExpressionAccess().getAndExpressionAction_0(),
            $current);
    }
)	otherlv_1='And' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAndExpressionAccess().getAndKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAndExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_expressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAndExpressionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleOrExpresison
entryRuleOrExpresison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpresisonRule()); }
	 iv_ruleOrExpresison=ruleOrExpresison 
	 { $current=$iv_ruleOrExpresison.current; } 
	 EOF 
;

// Rule OrExpresison
ruleOrExpresison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOrExpresisonAccess().getOrExpresisonAction_0(),
            $current);
    }
)	otherlv_1='Or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrExpresisonAccess().getOrKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpresisonAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpresisonAccess().getExpressionsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpresisonRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOrExpresisonAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpresisonAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_expressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpresisonRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOrExpresisonAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotExpressionAccess().getNotExpressionAction_0(),
            $current);
    }
)	otherlv_1='Not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotExpressionAccess().getNotKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNotExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNotExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_expressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNotExpressionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleIterableExpression
entryRuleIterableExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIterableExpressionRule()); }
	 iv_ruleIterableExpression=ruleIterableExpression 
	 { $current=$iv_ruleIterableExpression.current; } 
	 EOF 
;

// Rule IterableExpression
ruleIterableExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIterableExpressionAccess().getIterableExpressionAction_0(),
            $current);
    }
)(
(
		lv_ifEmpty_1_0=	'ifEmpty' 
    {
        newLeafNode(lv_ifEmpty_1_0, grammarAccess.getIterableExpressionAccess().getIfEmptyIfEmptyKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIterableExpressionRule());
	        }
       		setWithLastConsumed($current, "ifEmpty", true, "ifEmpty");
	    }

)
)?	otherlv_2='Iterable' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIterableExpressionAccess().getIterableKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIterableExpressionAccess().getOperandOperatorParserRuleCall_3_0()); 
	    }
		lv_operand_3_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterableExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIterableExpressionAccess().getLeftCurlyBracketKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getIterableExpressionAccess().getExpressionsExpressionParserRuleCall_5_0_0()); 
	    }
		lv_expressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterableExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIterableExpressionAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIterableExpressionAccess().getExpressionsExpressionParserRuleCall_5_1_1_0()); 
	    }
		lv_expressions_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterableExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIterableExpressionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleWithExpression
entryRuleWithExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWithExpressionRule()); }
	 iv_ruleWithExpression=ruleWithExpression 
	 { $current=$iv_ruleWithExpression.current; } 
	 EOF 
;

// Rule WithExpression
ruleWithExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='With' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWithExpressionAccess().getWithKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWithExpressionAccess().getVariableVariableParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWithExpressionRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWithExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getWithExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWithExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWithExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWithExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_expressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWithExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getWithExpressionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAdaptExpression
entryRuleAdaptExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdaptExpressionRule()); }
	 iv_ruleAdaptExpression=ruleAdaptExpression 
	 { $current=$iv_ruleAdaptExpression.current; } 
	 EOF 
;

// Rule AdaptExpression
ruleAdaptExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='AdaptTo' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAdaptExpressionAccess().getAdaptToKeyword_0());
    }
(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getAdaptExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdaptExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdaptExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdaptExpressionAccess().getExpressionsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdaptExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAdaptExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdaptExpressionAccess().getExpressionsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_expressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdaptExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAdaptExpressionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEqualExpression
entryRuleEqualExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualExpressionRule()); }
	 iv_ruleEqualExpression=ruleEqualExpression 
	 { $current=$iv_ruleEqualExpression.current; } 
	 EOF 
;

// Rule EqualExpression
ruleEqualExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Equal' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEqualExpressionAccess().getEqualKeyword_0());
    }
(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getEqualExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); } 
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current.getText(); }  
	 EOF 
;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getAndKeyword_0()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getOrKeyword_1()); 
    }
)
    ;







// Entry rule entryRuleVariable
entryRuleVariable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); } 
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current.getText(); }  
	 EOF 
;

// Rule Variable
ruleVariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='activeContexts' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableAccess().getActiveContextsKeyword_0()); 
    }

    |
	kw='activeEditor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableAccess().getActiveEditorKeyword_1()); 
    }

    |
	kw='activeEditorId' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableAccess().getActiveEditorIdKeyword_2()); 
    }

    |
	kw='activePartId' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableAccess().getActivePartIdKeyword_3()); 
    }

    |
	kw='activeSite' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableAccess().getActiveSiteKeyword_4()); 
    }

    |
	kw='selection' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableAccess().getSelectionKeyword_5()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


